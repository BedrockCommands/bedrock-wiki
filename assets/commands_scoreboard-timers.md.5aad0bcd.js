import{_ as n,a as t}from"./chunks/gametick.71decc06.js";import{_ as o,c as l,a,w as r,e,r as i,o as c,d}from"./404.md.14098ecd.js";const S=JSON.parse('{"title":"Scoreboard Timers","description":"","frontmatter":{"title":"Scoreboard Timers","category":"Scoreboard Systems","mention":["BedrockCommands","zheaEvyline"],"nav_order":5,"tags":["system"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]}],"relativePath":"commands/scoreboard-timers.md"}'),p={name:"commands/scoreboard-timers.md"},m=e('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system allows you to run your desired commands at specific intervals with any amount of delay you wish to add.</p><ul><li><strong>Some Examples:</strong><ul><li>Sending a message in chat every 20 minutes.</li><li>Running a &#39;lag clear&#39; function every 10 minutes.</li><li>Effecting players with &#39;speed&#39; 30 seconds.</li></ul></li></ul><p>This system is especially useful when you need to set up multiple timers on your world. When working with you may use the Tick Delay option to delay the time taken for your commands to run. However; when working with functions you will need to use a system like this.</p><p>It is also recommended to use this system while working with command blocks as well if you wish to run all your timers in sync with one another. ie. with the same start time.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p><em>To be typed in chat:</em></p>',8),u=e(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/scoreboard objectives add ticks dummy</span></span>
<span class="line"><span style="color:#C3E88D;">/scoreboard objectives add events dummy</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Once you have created these two objectives you will need to define the interval for each repeating event you need on your world in the <code>ticks</code> objective like so:</p>`,2),h=e(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/scoreboard players set 20m ticks</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2>`,2),y=e(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/scoreboard players reset new total</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a run scoreboard players add new total 1</span></span>
<span class="line"><span style="color:#C3E88D;">/scoreboard players operation new total -= old total</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute if score new total matches ..-1 run say a player has left the world</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">/scoreboard players reset old total</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a run scoreboard players add old total 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="`+n+'" alt="commandBlockChain6"></p><p>Here we have used a <strong><code>/say</code></strong> command as an example but you can use any command you prefer and as many as you require.</p><p>Just make sure to follow the given order and properly use the <code>/execute if score</code> command as shown to run the commands you need.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><ul><li><strong><code>new</code></strong> this FakePlayer name means the total number of players on the world in the current game tick.</li><li><strong><code>old</code></strong> this FakePlayer name means the total number of players that were on the world in the previous game tick but also saves the values to be used in the <em>next</em> game tick.</li></ul><p>These values are obtained using the <a href="https://wiki.bedrock.dev/commands/entity-counter.html" target="_blank" rel="noreferrer">Entity Counter</a> system. It may be beneficial to refer to that doc for better understanding this one.</p><p>By subtracting &#39;old&#39; total from &#39;new&#39; total we will be able to identify if player count has:</p><ul><li>decreased <code>..-1</code></li><li>increased <code>1..</code></li><li>or if it&#39;s unchanged <code>0</code></li></ul><p>If it has decreased; we know that 1 or more players have left the game. With this knowledge we can run our desired commands from &#39;new&#39; if it&#39;s score is -1 or less.</p><ul><li><p>ie, if there were 10 players and someone leaves:</p><ul><li>that is <code>new - old</code></li><li>which is <code>9 - 10 = -1</code></li><li>hence we will detect by <code>..-1</code></li></ul></li><li><p>The &#39;new&#39; total value is obtained first, subtraction is performed after that to run your desired commands and lastly the &#39;old&#39; total value is obtained to be used in the next game tick.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All commands involved in a command-block-chain or function will only run in a sequence one after the other but it all still happens in the same tick regardless of the number of commands involved. We are able to achieve this system due to the fact that commands run along the end of a game tick after all events such as player log in, log out, death etc.. occur.</p><p><img src="'+t+'" alt="gametick"></p></div>',12);function b(_,f,g,w,v,k){const s=i("CodeHeader");return c(),l("div",null,[m,a(s),u,a(s),h,a(s,null,{default:r(()=>[d("mcfunction")]),_:1}),y])}const x=o(p,[["render",b]]);export{S as __pageData,x as default};
