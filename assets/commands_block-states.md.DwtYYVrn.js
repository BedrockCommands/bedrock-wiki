import{_ as c,c as r,a as t,P as a,U as o,b as s,T as e,r as i,o as d}from"./chunks/framework.CiuNV1Mk.js";const C=JSON.parse('{"title":"Block States","description":"Learn how to use block states in commands.","frontmatter":{"title":"Block States","category":"General","mentions":["BedrockCommands","zheaEvyline","SmokeyStack","ThomasOrs"],"description":"Learn how to use block states in commands."},"headers":[],"relativePath":"commands/block-states.md","filePath":"commands/block-states.md","lastUpdated":1724109144000}'),u={name:"commands/block-states.md"},p=o('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced by Bedrock Commands Community Discord</a></p><p>Block States or Block Properties are additional data that defines how the block appears or behaves. Such as the direction it is facing, it&#39;s color, it&#39;s variant, whether it is powered or unpowered and so on.</p><p>This is used in a multitude of commands such as <code>/clone</code>, <code>/execute</code>, <code>/fill</code>, <code>/setblock</code> and <code>/testforblock</code></p><p>In Bedrock Edition we used Aux values (also known as Metadata) to define a block. However; as of 1.19.70 and beyond this is no longer supported and have been fully replaced with Block States instead.</p>',5),h=o(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Aux Value Example:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#It&#39;s Block State equivalent:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;orange&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Any command block using aux values will continue to function as it is however block states will need to be adopted when updating them.</li><li>Similarly any commands using aux values in behaviour or function packs with <code>min_engine_version</code> 1.19.63 or below will also continue to function however block states must be adopted if the <code>min_engine_version</code> is updated to 1.19.70 or above.</li></ul><h2 id="block-state-examples-syntax" tabindex="-1">Block State Examples &amp; Syntax <a class="header-anchor" href="#block-state-examples-syntax" aria-label="Permalink to &quot;Block State Examples &amp; Syntax&quot;">​</a></h2>`,3),b=o(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;white&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wheat [&quot;growth&quot;=0]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wood [&quot;wood_type&quot;=&quot;birch&quot;,&quot;stripped_bit&quot;=true]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Block states are enclosed in square brackets <code>[ ]</code></li><li>When specifying multiple block states a comma <code>,</code> is used to separate them.</li><li>Quotation marks <code>&quot; &quot;</code> are used around strings such as <code>&quot;birch&quot;, &quot;spruce&quot; etc..</code></li><li>Integer values <code>0, 1, 2..</code> and boolean values <code>true/false</code> do not use quotation marks.</li><li>Leaving the brackets blank is also a correct syntax, it will simply default to 0.</li><li><code>wool 0</code> is white wool hence you may simply write it as <code>wool []</code> instead of <code>wool [&quot;color&quot;=&quot;white&quot;]</code></li></ul><h3 id="notes-for-beginners" tabindex="-1">Notes For Beginners <a class="header-anchor" href="#notes-for-beginners" aria-label="Permalink to &quot;Notes For Beginners&quot;">​</a></h3><ul><li><p><strong>Integers</strong> are whole numbers. They are used to define a block from a &#39;range&#39; of values.</p><ul><li>Example: Redstone power 1 to 15</li><li><code>[&quot;redstone_power&quot;=10]</code></li></ul></li><li><p><strong>Boolean</strong> is a programming term which refers to <code>true/false</code> values. You can simply understand it as yes or no questions.</p><ul><li>Is this piston powered? <code>yes/no</code></li><li>Is this button pressed? <code>yes/no</code></li><li>Is this log stripped? <code>yes/no</code></li><li><code>[&quot;stripped_bit&quot;=true]</code></li></ul></li><li><p><strong>Strings</strong> are unique &#39;text&#39; inputs. You can simply understand it as multiple choice questions.</p><ul><li>What color is this wool? <code>&quot;white&quot;</code>, <code>&quot;orange&quot;</code>, <code>&quot;brown&quot;</code> etc..</li><li>What wood type is this log? <code>&quot;spruce&quot;</code>, <code>&quot;birch&quot;</code>, <code>&quot;acacia&quot;</code> etc..</li><li><code>[&quot;wood_type&quot;=&quot;spruce&quot;]</code></li></ul></li></ul><h2 id="block-states-list" tabindex="-1">Block States List <a class="header-anchor" href="#block-states-list" aria-label="Permalink to &quot;Block States List&quot;">​</a></h2><p>A list of all the block states currently available within Bedrock can be found at: <a href="https://learn.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockstateslist" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockstateslist</a></p><p>Note: In the site block states may be written as one word but make sure to separate them with underscores <code>_</code> when typing in commands.</p><p>Example: <code>buttonPressedBit</code> → <code>&quot;button_pressed_bit&quot;</code></p><h2 id="converting-aux-values-to-block-states" tabindex="-1">Converting Aux Values to Block States <a class="header-anchor" href="#converting-aux-values-to-block-states" aria-label="Permalink to &quot;Converting Aux Values to Block States&quot;">​</a></h2><p>For your convenience; download any of the excel sheet below to find the full list of block IDs, their aux values and equivalent block states in Bedrock. <em>Shared by kayla@Mojang</em></p>`,10),m=s("p",null,[e("Note: the above sheet was quickly generated and contains some minor errors. Boolean values "),s("code",null,"0"),e(" should be replaced with "),s("code",null,"false"),e(" and "),s("code",null,"1"),e(" should be replaced with "),s("code",null,"true"),e(" since the game doesn't recognize the syntax otherwise.")],-1),k=s("p",null,[e("Alternate sheet: "),s("em",null,"Shared by @ItsRichHeart")],-1),_=o('<p>You may also use this <a href="https://auxval-to-blockstates.netlify.app/" target="_blank" rel="noreferrer">Lookup Table</a> instead not needing to download any files.</p><h2 id="known-issue" tabindex="-1">Known Issue <a class="header-anchor" href="#known-issue" aria-label="Permalink to &quot;Known Issue&quot;">​</a></h2><p>Detecting blocks using commands such as <code>/execute</code> or <code>/testforblock</code> requires <strong>all</strong> or <strong>none</strong> of the block states specified else the command returns an error.</p><p>Example; detecting a pressed stone button on ground facing up:</p>',4),g=o(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#✅ Accepted:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [“button_pressed_bit”=true,”facing_direction”=1] run say success</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button run say success</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Not Accepted:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [“button_pressed_bit”=true] run say success</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [“facing_direction”=1] run say success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>From the above code, we can see that, though block states have replaced aux values, we still cannot detect blocks based on only the specific block states needed to test like we do in the case of entities using selector arguments.</p><h3 id="related-bug-reports" tabindex="-1">Related Bug Reports <a class="header-anchor" href="#related-bug-reports" aria-label="Permalink to &quot;Related Bug Reports&quot;">​</a></h3><ul><li><a href="https://bugs.mojang.com/browse/MCPE-133360" target="_blank" rel="noreferrer">MCPE-133360</a></li><li><a href="https://bugs.mojang.com/browse/MCPE-168391" target="_blank" rel="noreferrer">MCPE-168391</a></li></ul>`,4);function f(w,y,q,v,x,B){const n=i("CodeHeader"),l=i("BButton");return d(),r("div",null,[p,t(n,null,{default:a(()=>[e("example")]),_:1}),h,t(n,null,{default:a(()=>[e("Examples")]),_:1}),b,t(l,{link:"https://github.com/BedrockCommands/bedrockcommands.github.io/files/10987839/Aux-Value_to_Block-States_Map.xlsx",color:"white"},{default:a(()=>[e("Download Sheet 1")]),_:1}),m,k,t(l,{link:"https://github.com/BedrockCommands/bedrockcommands.github.io/files/11069804/All.Block-Item.List.Bedrock.pdf",color:"white"},{default:a(()=>[e("Download Sheet 2")]),_:1}),_,t(n),g])}const T=c(u,[["render",f]]);export{C as __pageData,T as default};
