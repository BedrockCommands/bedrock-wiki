import{_ as t,E as n,j as l,k as i,a5 as s,A as o}from"./chunks/framework.3Z9w-w8R.js";const k=JSON.parse('{"title":"Block States","description":"Learn how to use block states in commands.","frontmatter":{"title":"Block States","category":"General","mentions":["BedrockCommands","zheaEvyline","SmokeyStack","ThomasOrs"],"description":"Learn how to use block states in commands."},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Example Conversion","slug":"example-conversion","link":"#example-conversion","children":[]}]},{"level":2,"title":"Syntax and Examples","slug":"syntax-and-examples","link":"#syntax-and-examples","children":[{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":3,"title":"Examples","slug":"examples","link":"#examples","children":[]}]},{"level":2,"title":"Key Concepts for Beginners","slug":"key-concepts-for-beginners","link":"#key-concepts-for-beginners","children":[]},{"level":2,"title":"Reference for Block States","slug":"reference-for-block-states","link":"#reference-for-block-states","children":[]},{"level":2,"title":"Conversion Tool","slug":"conversion-tool","link":"#conversion-tool","children":[]},{"level":2,"title":"Known Limitations","slug":"known-limitations","link":"#known-limitations","children":[{"level":3,"title":"Examples","slug":"examples-1","link":"#examples-1","children":[]},{"level":3,"title":"Related Bug Reports","slug":"related-bug-reports","link":"#related-bug-reports","children":[]}]}],"relativePath":"commands/block-states.md","filePath":"commands/block-states.md"}'),r={name:"commands/block-states.md"};function c(d,e,p,u,h,m){const a=n("CodeHeader");return i(),l("div",null,[e[0]||(e[0]=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced by Bedrock Commands Community Discord</a></p><p>Block States, also known as Block Properties, define how blocks appear or behave, including attributes like direction, color, variant, or power state. These are extensively used in commands such as <code>/clone</code>, <code>/execute</code>, <code>/fill</code>, <code>/setblock</code>, and <code>/testforblock</code>.</p><p>Before version 1.19.70, Bedrock Edition relied on Aux values (metadata) to define blocks. However, this approach has been replaced by Block States. Aux values are no longer supported in newer engine versions.</p><h3 id="example-conversion" tabindex="-1">Example Conversion <a class="header-anchor" href="#example-conversion" aria-label="Permalink to &quot;Example Conversion&quot;">​</a></h3>',5)),o(a),e[1]||(e[1]=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Aux value example:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Equivalent using Block States:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;orange&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Commands using Aux values will function in older versions or in Behaviour Packs with <code>min_engine_version</code> set to 1.19.63 or below.</li><li>Updating the <code>min_engine_version</code> to 1.19.70 or above requires transitioning to Block States.</li></ul><h2 id="syntax-and-examples" tabindex="-1">Syntax and Examples <a class="header-anchor" href="#syntax-and-examples" aria-label="Permalink to &quot;Syntax and Examples&quot;">​</a></h2><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><ul><li>Block States are enclosed in square brackets (<code>[]</code>).</li><li>Separate multiple states with a comma (<code>,</code>).</li><li>Use quotation marks (<code>&quot; &quot;</code>) around strings (e.g., <code>&quot;birch&quot;</code>, <code>&quot;orange&quot;</code>).</li><li>Integer (<code>0</code>, <code>1</code>, etc.) and boolean (<code>true</code>, <code>false</code>) values should not use quotation marks.</li><li>Empty brackets (<code>[]</code>) or the absence of brackets default to <code>0</code> (e.g., <code>wool []</code> or simply <code>wool</code> corresponds to white wool).</li></ul><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3>`,6)),o(a),e[2]||(e[2]=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;white&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wheat [&quot;growth&quot;=0]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wood [&quot;wood_type&quot;=&quot;birch&quot;,&quot;stripped_bit&quot;=true]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="key-concepts-for-beginners" tabindex="-1">Key Concepts for Beginners <a class="header-anchor" href="#key-concepts-for-beginners" aria-label="Permalink to &quot;Key Concepts for Beginners&quot;">​</a></h2><ol><li><strong>Integers</strong>: Whole numbers used to define ranges (e.g., <code>[&quot;redstone_power&quot;=10]</code> for redstone strength).</li><li><strong>Booleans</strong>: Represent <code>true/false</code> states (e.g., <code>[&quot;stripped_bit&quot;=true]</code> for stripped logs).</li><li><strong>Strings</strong>: Represent predefined text inputs (e.g., <code>[&quot;wood_type&quot;=&quot;spruce&quot;]</code>).</li></ol><h2 id="reference-for-block-states" tabindex="-1">Reference for Block States <a class="header-anchor" href="#reference-for-block-states" aria-label="Permalink to &quot;Reference for Block States&quot;">​</a></h2><p>A comprehensive list of Block States is available at: <a href="https://learn.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockstateslist" target="_blank" rel="noreferrer">Block States List</a></p><ul><li><strong>Note</strong>: Block States listed in <code>camelCase</code> format on the site must be converted to <code>snake_case</code> in commands. <ul><li>Example: <code>buttonPressedBit</code> → <code>&quot;button_pressed_bit&quot;</code></li></ul></li></ul><h2 id="conversion-tool" tabindex="-1">Conversion Tool <a class="header-anchor" href="#conversion-tool" aria-label="Permalink to &quot;Conversion Tool&quot;">​</a></h2><p>Use this <a href="https://auxval-to-blockstates.netlify.app/" target="_blank" rel="noreferrer">Lookup Table</a> by <em>@SmokeyStack</em> to convert Aux values to Block States.</p><h2 id="known-limitations" tabindex="-1">Known Limitations <a class="header-anchor" href="#known-limitations" aria-label="Permalink to &quot;Known Limitations&quot;">​</a></h2><p>Commands using blocks must specify all corresponding Block States or leave the Block States field empty. Missing any required states causes the command to fail.</p><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3>`,11)),o(a),e[3]||(e[3]=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Testing a Stone Button (Aux Value 0)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button run say success</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Testing a non-pressed Stone Button facing west (Aux Value 1)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [&quot;button_pressed_bit&quot;=false,&quot;facing_direction&quot;=1] run say success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>The first command works because the Block States field is empty.</li><li>The second command works because all relevant states (<code>button_pressed_bit</code>, <code>facing_direction</code>) are specified.</li></ul><blockquote><p><strong>Note</strong>: Testing a partial condition (e.g., <code>[&quot;button_pressed_bit&quot;=true]</code>) without other states, such as <code>facing_direction</code>, will fail. Unlike entities, blocks do not yet support condition-based filtering.</p></blockquote><h3 id="related-bug-reports" tabindex="-1">Related Bug Reports <a class="header-anchor" href="#related-bug-reports" aria-label="Permalink to &quot;Related Bug Reports&quot;">​</a></h3><ul><li><a href="https://bugs.mojang.com/browse/MCPE-133360" target="_blank" rel="noreferrer">MCPE-133360</a></li><li><a href="https://bugs.mojang.com/browse/MCPE-168391" target="_blank" rel="noreferrer">MCPE-168391</a></li></ul>`,5))])}const g=t(r,[["render",c]]);export{k as __pageData,g as default};
