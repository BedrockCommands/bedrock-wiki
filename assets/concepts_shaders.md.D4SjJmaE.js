import{_ as t,c as i,a,U as e,o as n,d0 as r,r as l}from"./chunks/framework.B4J9HXaD.js";const q=JSON.parse('{"title":"Shaders","description":"Shaders for MCBE.","frontmatter":{"title":"Shaders","mentions":["SirLich","Dreamedc2015","yanasakana","MedicalJewel","SIsilicon"],"description":"Shaders for MCBE."},"headers":[],"relativePath":"concepts/shaders.md","filePath":"concepts/shaders.md","lastUpdated":1724346932000}'),o={name:"concepts/shaders.md"},d=e('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The shaders on this page are incompatible with <a href="https://help.minecraft.net/hc/en-us/articles/360052771272-About-the-1-16-200-Update-for-Windows-10-" target="_blank" rel="noreferrer">Render Dragon</a>. That means that they will not work on Windows and Console devices past 1.16.200, nor other devices past 1.18.30!</p></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Shaders are divided into 2 folders: <code>glsl</code> and <code>hlsl</code>. For shaders to work on every device, you need to code shaders in both languages. For testing on Windows, <code>hlsl</code> is enough. When rewriting shaders from one language to another, there are few things to change, like HLSL <code>float3</code> is <code>vec3</code> in GLSL. Mapping between those languages can be found <a href="https://anteru.net/blog/2016/mapping-between-HLSL-and-GLSL/" target="_blank" rel="noreferrer">here</a></p><h2 id="materials" tabindex="-1">Materials <a class="header-anchor" href="#materials" aria-label="Permalink to &quot;Materials&quot;">​</a></h2><p>Vertex, fragments, and sometimes geometry shaders are combined with some options as materials and are required for custom shaders. To create new material, you need to create a file, which matches the name of the .material file in the vanilla resource pack. For example: <code>materials/particles.material</code>. Materials support inheritance by adding parent material after a colon. For example: <code>entity_alpha:entity_base</code></p><h3 id="common-material-definition-fields" tabindex="-1">Common material definition fields <a class="header-anchor" href="#common-material-definition-fields" aria-label="Permalink to &quot;Common material definition fields&quot;">​</a></h3><table><thead><tr><th><strong>Field name</strong></th><th><strong>Description</strong></th><th><strong>Example value</strong></th><th><strong>Notes</strong></th></tr></thead><tbody><tr><td><code>vertexShader</code></td><td>Path to the shader relative to hlsl/glsl folder</td><td></td><td>For HLSL shader, <code>.hlsl</code> suffix is added.</td></tr><tr><td><code>fragmentShader</code></td><td>Path to the shader relative to hlsl/glsl folder</td><td></td><td>For HLSL shader, <code>.hlsl</code> suffix is added.</td></tr><tr><td><code>vertexFields</code></td><td>An array of fields passed to vertex shader</td><td></td><td>It&#39;s better to copy this field from vanilla material.</td></tr><tr><td><code>variants</code></td><td>An array of objects, which define variants of the material</td><td></td><td>It&#39;s better to copy this field from vanilla material.</td></tr><tr><td><code>+defines</code></td><td>An array of <code>#define</code> directives to add to the shader source</td><td></td><td>Useful for reusing shader, but changing some minor setting.</td></tr><tr><td><code>+states</code></td><td>An array of states to enable</td><td><code>[&quot;Blending&quot;, &quot;DisableAlphaWrite&quot;, &quot;DisableDepthWrite&quot;]</code></td><td>For OpenGL implementation, this is equivalent to <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glEnable.xml" target="_blank" rel="noreferrer">glEnable</a> call.</td></tr><tr><td><code>-defines</code></td><td>An array of <code>#defines</code> directives to remove from inherited <code>+defines</code></td><td></td><td></td></tr><tr><td><code>+samplerStates</code></td><td>An array of objects, defining how texture at certain index is treated</td><td><code>{ &quot;samplerIndex&quot;: 0, &quot;textureFilter&quot;: &quot;Point&quot; }</code></td><td><code>textureFilter</code> specifies how to sample the texture and <code>textureWrap</code> specifies the behavior, when accessing outside of the texture dimensions.</td></tr><tr><td><code>msaaSupport</code></td><td>Multisample anti-aliasing support</td><td><code>Both</code></td><td></td></tr><tr><td><code>blendSrc</code></td><td>Specifies how the color source blending factors are computed</td><td><code>One</code></td><td>For OpenGL implementation, this is equivalent to <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFunc.xhtml" target="_blank" rel="noreferrer">glBlendFunc</a> call.</td></tr><tr><td><code>blendDst</code></td><td>Specifies how the color destination blending factors are computed</td><td><code>One</code></td><td>For OpenGL implementation, this is equivalent to <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFunc.xhtml" target="_blank" rel="noreferrer">glBlendFunc</a> call.</td></tr></tbody></table><p>Example:</p>',8),h=e(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;materials&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;particle_debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;vertexShader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shaders/particle_generic.vertex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;fragmentShader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shaders/particle_debug.fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;vertexFields&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UV0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;+samplerStates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">					&quot;samplerIndex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">					&quot;textureFilter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Point&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;msaaSupport&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Both&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>For all the details about material files and possible field values, check <a href="https://github.com/stirante/bedrock-shader-schema/blob/master/materials.schema.json" target="_blank" rel="noreferrer">material file JSON schema</a>.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="shader-doesn-t-change" tabindex="-1">Shader doesn’t change <a class="header-anchor" href="#shader-doesn-t-change" aria-label="Permalink to &quot;Shader doesn’t change&quot;">​</a></h3><p>Every time there is a change in the shader, you need to restart Minecraft to recompile the shader completely.</p><h3 id="compilation-error" tabindex="-1">Compilation error <a class="header-anchor" href="#compilation-error" aria-label="Permalink to &quot;Compilation error&quot;">​</a></h3><p>When there is a shader compilation error, a line number is usually specified where the error occurred. You need to check a few lines above the one set in error because Minecraft adds <code>#define</code> directives before compilation.</p><h3 id="couldn-t-find-constant-buffer-named-globals" tabindex="-1">Couldn’t find constant buffer named: $Globals <a class="header-anchor" href="#couldn-t-find-constant-buffer-named-globals" aria-label="Permalink to &quot;Couldn’t find constant buffer named: $Globals&quot;">​</a></h3><p>I couldn’t accurately find the actual cause of this error, but it seems to be somehow connected to global variables. Removing them (initializing them in the <code>main</code> function or changing them to <code>#define</code> directives) seems to fix the problem.</p><h2 id="tips-and-tricks" tabindex="-1">Tips and tricks <a class="header-anchor" href="#tips-and-tricks" aria-label="Permalink to &quot;Tips and tricks&quot;">​</a></h2><h3 id="passing-variables-to-the-shader" tabindex="-1">Passing variables to the shader <a class="header-anchor" href="#passing-variables-to-the-shader" aria-label="Permalink to &quot;Passing variables to the shader&quot;">​</a></h3><p>You can pass variables to the shader from a particle or an entity by changing entity color. Input color is clamped to <code>&lt;0.0, 1.0&gt;</code>. To pass more significant values, you need to divide by max value (or at least some considerable number).</p><h3 id="using-time-in-shader" tabindex="-1">Using time in shader <a class="header-anchor" href="#using-time-in-shader" aria-label="Permalink to &quot;Using time in shader&quot;">​</a></h3><p><code>TIME</code> variable is a number of seconds as <code>float</code> and is global for all shaders. For time-based on particle lifetime, you need to pass this:</p>`,14),p=e(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;minecraft:particle_appearance_tinting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;variable.particle_age/variable.particle_lifetime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Then in the shader, use <code>PSInput.color.r</code> as time, where <code>0.0</code> is particle birth and <code>1.0</code> is particle death.</p><h3 id="camera-direction-towards-the-entity" tabindex="-1">Camera direction towards the entity <a class="header-anchor" href="#camera-direction-towards-the-entity" aria-label="Permalink to &quot;Camera direction towards the entity&quot;">​</a></h3><p>For entity shaders, you can make the shader dependent on the camera direction towards the entity.</p><ul><li>Add to <code>PS_Input</code> in vertex and fragment shader new field</li></ul>`,5),c=e('<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>float3 viewDir: POSITION;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>After that, add to vertex shader this line</li></ul>',2),u=e('<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>PSInput.viewDir = normalize((mul(WORLD, mul(BONES[VSInput.boneId], float4(VSInput.position, 1)))).xyz);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>In the fragment shader, use <code>PSInput.viewDir</code> to make changes depending on camera rotation</li></ul><h3 id="debugging-values" tabindex="-1">Debugging values <a class="header-anchor" href="#debugging-values" aria-label="Permalink to &quot;Debugging values&quot;">​</a></h3><p>The easiest way to debug a value is to turn it into color and render it like this.</p>',4),k=e('<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>PSOutput.color = float4(PSInput.uv, 0., 1.);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This should create a red-green gradient, showing that the values of <code>uv</code> are between <code>&lt;0, 0&gt;</code> and <code>&lt;1, 1&gt;</code>.</p><p>You can use the debug shader I wrote <a href="http://mew.cx/drawtext/drawtext" target="_blank" rel="noreferrer">based on this shader</a>. Right now, this shader will display values of the color passed to the shader. To display another value, change line 70 in hlsl shader to</p>',3),g=e('<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int ascii = getFloatCharacter( cellIndex, &lt;float4 vector here&gt; );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>GLSL version of debugging shader may crash Minecraft, use only for debugging.</p><p><a href="http://files.stirante.com/debugShader.zip" target="_blank" rel="noreferrer">Download debug shader</a></p><p><img src="'+r+'" alt=""></p>',4);function m(b,E,f,_,y,v){const s=l("CodeHeader");return n(),i("div",null,[d,a(s),h,a(s),p,a(s),c,a(s),u,a(s),k,a(s),g])}const C=t(o,[["render",m]]);export{q as __pageData,C as default};
