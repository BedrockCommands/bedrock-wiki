import{_ as l}from"./chunks/3.Chttxwff.js";import{_ as p,E as t,j as d,k as c,a5 as s,A as a,I as i,J as o}from"./chunks/framework.3Z9w-w8R.js";const _=JSON.parse('{"title":"On Player Respawn","description":"This system will run your desired commands on the event that a player respawns from death state.","frontmatter":{"title":"On Player Respawn","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":5,"description":"This system will run your desired commands on the event that a player respawns from death state."},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]},{"level":2,"title":"Tick JSON","slug":"tick-json","link":"#tick-json","children":[]}],"relativePath":"commands/on-player-respawn.md","filePath":"commands/on-player-respawn.md"}'),u={name:"commands/on-player-respawn.md"};function h(m,e,k,y,w,b){const n=t("CodeHeader"),r=t("FolderView");return c(),d("div",null,[e[2]||(e[2]=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced by the Bedrock Commands Community (BCC) Discord</a></p><p>This system will run your desired commands on the event that a player respawns from death state.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add wiki:respawn dummy</code></p><p>If you are working with functions and prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-label="Permalink to &quot;System&quot;">​</a></h2>',8)),a(n,null,{default:i(()=>e[0]||(e[0]=[o("BP/functions/events/player/on_respawn.mcfunction")])),_:1}),e[3]||(e[3]=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Your Commands Here (Example)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">execute as @e[scores={wiki:respawn=1}] run say I died and respawned.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Set Player States</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### Currently respawning</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scoreboard players set @a wiki:respawn 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### Currently not respawning</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scoreboard players set @e[type=player] wiki:respawn 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+l+'" alt="Chain of 3 Command Blocks"></p><p>Here, we have used an <code>/execute - say</code> command as an example, but you can use any command you prefer and as many as you need.</p><p>Just make sure to follow the given order and properly apply the <code>@e[scores={wiki:respawn=1}]</code> selector argument as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><ul><li><strong><code>wiki:respawn=0</code></strong> player is alive or had already respawned.</li><li><strong><code>wiki:respawn=1</code></strong> player is dead or has just respawned (in the current game-tick).</li><li><strong><code>@a</code></strong> selector will target all players alive/dead. Hence, we will use it to mark players as <code>1</code> &#39;respawning&#39;</li><li><strong><code>@e</code></strong> selector on the other hand will only target players who are alive, so we can use this to mark all alive players 0 &#39;respawned&#39;</li></ul><p>Now that <em>respawning</em> players are <code>1</code> and <em>respawned</em> players are <code>0</code>, we can use this knowledge to run our desired commands when the players with score <code>1</code> respawn from death state. They are targeted with <code>@e</code> selector.</p><p>In the system, your desired commands must come before the other 2 commands because players change from death state to alive state along the start of the game-tick, before commands are run.</p><p>Hence, if we were to put them at the end, the other 2 commands would set respawning players score to <code>0</code> first and the commands you want to run won&#39;t be able to select those players as our selector argument is <code>@e[scores={wiki:respawn=1}]</code>, not <code>0</code>. Using <code>0</code> would not work as then it would repeat endlessly even on players who have already respawned.</p><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-label="Permalink to &quot;Tick JSON&quot;">​</a></h2><p>If you are using functions instead of command blocks, the <code>on_respawn</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions#tick-json">Functions</a> documentation for further info.</p>',11)),a(n,null,{default:i(()=>e[1]||(e[1]=[o("BP/functions/tick.json")])),_:1}),e[4]||(e[4]=s(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;wiki/event/players/on_respawn&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be as follows:</p>`,2)),a(r,{paths:["BP","BP/functions","BP/functions/wiki","BP/pack_icon.png","BP/manifest.json","BP/functions/wiki/event","BP/functions/wiki/event/players","BP/functions/wiki/event/players/on_respawn.mcfunction","BP/functions/tick.json"]})])}const v=p(u,[["render",h]]);export{_ as __pageData,v as default};
