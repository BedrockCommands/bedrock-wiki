import{_ as l,c,a as n,P as o,U as s,b as e,T as a,r as i,o as d,as as p}from"./chunks/framework.KjOEH70y.js";const C=JSON.parse('{"title":"Entity Counter","description":"This system allows you to track how many players/entities are there on your world and run your desired commands based on the values obtained.","frontmatter":{"title":"Entity Counter","category":"Scoreboard Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":3,"description":"This system allows you to track how many players/entities are there on your world and run your desired commands based on the values obtained."},"headers":[],"relativePath":"commands/entity-counter.md","filePath":"commands/entity-counter.md","lastUpdated":1723852445000}'),u={name:"commands/entity-counter.md"},h=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system allows you to track how many players/entities are there on your world and run your desired commands based on the values obtained.</p><blockquote><p>Note: you cannot track entities in unloaded chunks though players can still be tracked regardless.</p></blockquote><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add total dummy</code></p><p>If you prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load.html">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-label="Permalink to &quot;System&quot;">​</a></h2>',9),m=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scoreboard players set onlinePlayers total 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">execute as @e [type=player] run scoreboard players add onlinePlayers total 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Your Commands Here (examples)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">execute if score onlinePlayers total matches 4.. run title @a actionbar Enough players to start game.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">execute if score onlinePlayers total matches ..3 run title @a actionbar Not enough players.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+p+'" alt="commandBlockChain3"></p><p>Here we have used a FakePlayer name <code>onlinePlayers</code> and targeting <code>@e [type=player]</code> to track how many players are currently on the world. However you may use any FakePlayer name and target any entity you might need. Such as <code>@e [type=creeper]</code></p><p>Similarly we&#39;re running a <code>/title</code> command as an example:</p><ul><li>a) when there are 4 or more players <code>4..</code></li><li>b) when there are 3 players or less <code>..3</code></li></ul><p>You can edit this as well to suit your need.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><ul><li>The first two commands in the system sets the FakePlayer name&#39;s score to 0 (here <code>onlinePlayers</code>) and from each loaded entity we want to track (here <code>type=player</code>) it will add a score to the specified FakePlayer name (here <code>onlinePlayers</code>)</li></ul><p>Now based on the values obtained we can use the <code>/execute if score</code> command to run our desired commands when certain values are met.</p><ul><li><strong><code>n</code></strong> any number n</li><li><strong><code>n..</code></strong> any number n and above</li><li><strong><code>..n</code></strong> any number n and below</li><li><strong><code>n1..n2</code></strong> any number n1 to any number n2.</li></ul><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-label="Permalink to &quot;Tick JSON&quot;">​</a></h2><p>If you are using functions instead of command blocks, the <code>entity_counter</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions.html#tick-json">Functions</a> documentation for further info.</p>',12),y=s(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;entity_counter&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be be as follows:</p>`,2),b=e("blockquote",null,[e("p",null,[e("strong",null,"Note:"),a(" the scoreboard names (in this case: 'total') may end up being used by other people. Appending "),e("code",null,"_"),a(" and a set of randomly generated characters after would be a choice that reduces the probability of collisions. Similar technique can be employed for the "),e("code",null,".mcfunction"),a(" filenames. Ex:")]),e("ul",null,[e("li",null,[e("code",null,"total_0fe678")]),e("li",null,[e("code",null,"entity_counter_0fe678.mcfunction")])])],-1);function k(_,f,g,w,P,E){const t=i("CodeHeader"),r=i("FolderView");return d(),c("div",null,[h,n(t,null,{default:o(()=>[a("BP/functions/entity_counter.mcfunction")]),_:1}),m,n(t,null,{default:o(()=>[a("BP/functions/tick.json")]),_:1}),y,n(r,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/entity_counter.mcfunction","BP/functions/tick.json"]}),b])}const T=l(u,[["render",k]]);export{C as __pageData,T as default};
