import{_ as i}from"./chunks/7.caf9e800.js";import{_ as t,c as r,a as e,w as a,e as s,r as p,o as c,d as l}from"./404.md.eebc8d69.js";const d="/assets/images/commands/states/moving.gif",m="/assets/images/commands/states/sleeping.jpg",o="/assets/images/commands/commandBlockChain/5.png",g="/assets/images/commands/states/sneaking.png",u="/assets/images/commands/states/crawling.png",y="/assets/images/commands/states/issue2.png",h="/assets/images/commands/states/issue3.png",b="/assets/images/commands/commandBlockChain/9.png",V=JSON.parse('{"title":"Movement Detections","description":"","frontmatter":{"title":"Movement Detections","category":"Techniques","mention":["BedrockCommands","zheaEvyline"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"is_moving","slug":"is-moving","link":"#is-moving","children":[]},{"level":2,"title":"Differentiating Walking And Sprinting","slug":"differentiating-walking-and-sprinting","link":"#differentiating-walking-and-sprinting","children":[]},{"level":2,"title":"is_sleeping","slug":"is-sleeping","link":"#is-sleeping","children":[]},{"level":2,"title":"is_sneaking","slug":"is-sneaking","link":"#is-sneaking","children":[]},{"level":2,"title":"is_crawling","slug":"is-crawling","link":"#is-crawling","children":[]},{"level":2,"title":"Differentiating Crawling, Gliding And Swimming","slug":"differentiating-crawling-gliding-and-swimming","link":"#differentiating-crawling-gliding-and-swimming","children":[]}],"relativePath":"commands/states.md"}'),C={name:"commands/states.md"},D=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p><a href="https://minecraft.wiki/" target="_blank" rel="noreferrer">Image Credits: Official Minecraft Wiki - </a><strong><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank" rel="noreferrer">CC BY-NC-SA 3.0</a></strong></p><p>These command-techniques allow you to detect certain player/entity &#39;states&#39; and subsequently execute your desired commands.</p><blockquote><p>Note: For a more performant and high-accuracy approach, it is advisable to use <a href="/animation-controllers/animation-controllers-intro.html">Animation Controllers</a></p></blockquote><h2 id="is-moving" tabindex="-1">is_moving <a class="header-anchor" href="#is-moving" aria-hidden="true">#</a></h2><p>This technique allows you to detect when your target is/isn&#39;t moving, accounting for even subtle movements.</p><p><img src="'+d+'" alt="player_moving"></p><div class="warning custom-block"><p class="custom-block-title">Known Issues:</p><ol><li>Does not account for movement while the spyglass is zoomed in or when Slowness Level 6 or higher is in effect.</li><li>Jumping causes the detection to trigger twice.</li></ol></div><p><strong>Commands:</strong></p><ul><li>Make sure you add the <code>is_moving</code> scoreboard objective: <ul><li><code>/scoreboard objectives add is_moving dummy</code></li></ul></li></ul>',11),_=s(`<div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#moving</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a at </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s positioned </span><span style="color:#89DDFF;">~~</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">e </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;">=leash_knot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r=</span><span style="color:#F78C6C;">0.1252</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> run scoreboard players </span><span style="color:#FFCB6B;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s is_moving </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a at </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s positioned </span><span style="color:#89DDFF;">~~</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> unless entity </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">e </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;">=leash_knot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r=</span><span style="color:#F78C6C;">0.1252</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> run scoreboard players add </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s is_moving </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#update point</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">e </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;">=leash_knot</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> at </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s unless entity </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">y=</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dy=</span><span style="color:#F78C6C;">9974</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> run kill </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">s</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute at </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a positioned </span><span style="color:#89DDFF;">~~</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> run summon leash_knot </span><span style="color:#89DDFF;">~~~</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">scores=</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">is_moving=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}]</span><span style="color:#A6ACCD;"> run say I</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">m not moving</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">scores=</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">is_moving=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}]</span><span style="color:#A6ACCD;"> run say I started moving</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">execute </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">scores=</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">is_moving=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">.}]</span><span style="color:#A6ACCD;"> run say I</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">m still moving</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="`+i+'" alt="commandBlockChain7"></p><p>It is a requirement to follow this same sequence and properly apply the <code>scores</code> selector argument as shown for your desired commands.</p><p><strong>States:</strong></p><ul><li><strong><code>is_moving=0</code></strong> target is <em>not</em> moving.</li><li><strong><code>is_moving=1</code></strong> target started moving. (used for &#39;trigger&#39; actions)</li><li><strong><code>is_moving=1..</code></strong> target is still moving. (used for repeating actions)</li></ul><p><strong>Purpose Of Each Command:</strong></p><ul><li><strong>Command 1:</strong> If there is a Leash Knot above them, it means they have not moved from their &quot;point&quot; from the previous game-tick. Marking them as <em>not</em> moving (0) <ul><li>Leash Knot is a Vanilla entity with anti-gravity behaviour which serves as a static entity for this system.</li></ul></li><li><strong>Command 2:</strong> If there <em>isn&#39;t</em> a Leash Knot above them, it means they have displaced from their &quot;point&quot; from the previous game-tick. Marking them as <em>moving</em> (1) by adding a score. <ul><li>The score will keep incrementing if they keep moving without pause. Allowing us to use single-execution commands each time they start moving.</li></ul></li><li><strong>Command 3:</strong> We need to delete all previous &quot;points&quot; (kill old Leash Knots) to minimise entity lag. We will also avoid affecting any Leash Knots below the ~10000 height not involved in this system. <ul><li>we are using the volume filter instead of a simple name filter to do that, because Leash Knots cannot be named.</li></ul></li><li><strong>Command 4:</strong> We will summon a new Leash Knot ~10000 blocks above the player to mark the point they are currently at, which we will test-for in command 1 &amp; 2, in the next game tick. (when this command block chain loops/repeats)</li><li><strong>Command 5, 6, 7:</strong> These are example commands (for each state) which can be modified / expanded.</li></ul><h2 id="differentiating-walking-and-sprinting" tabindex="-1">Differentiating Walking And Sprinting <a class="header-anchor" href="#differentiating-walking-and-sprinting" aria-hidden="true">#</a></h2><p>If you desperately need to detect walking and sprinting separately <strong>solely using commands</strong>, you may use this technique below.</p><div class="warning custom-block"><p class="custom-block-title">Known Issue:</p><p>Walk/Sprint Detection may not work properly with effects &amp; enchantments.</p></div>',10),w=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#moving</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ if entity @e [type=leash_knot, r=0.1252] run scoreboard players set @s is_moving 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ unless entity @e [type=leash_knot, r=0.1252] run scoreboard players add @s is_moving 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#walking</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ if entity @e [type=leash_knot, r=0.21585] run scoreboard players set @s is_walking 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ if entity @e [type=leash_knot, r=0.2806, rm=0.21585] run scoreboard players add @s is_walking 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#sprinting</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ if entity @e [type=leash_knot, r=0.2806] run scoreboard players set @s is_sprinting 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s positioned ~~10000~ if entity @e [type=leash_knot, r=0.9, rm=0.2806] run scoreboard players add @s is_sprinting 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#update point</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @e [type=leash_knot] at @s unless entity @s [y=-80, dy=9974] run kill @s</span></span>
<span class="line"><span style="color:#C3E88D;">/execute at @a positioned ~~10000~ run summon leash_knot ~~~</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sprinting=1..}] run say I&#39;m sprinting</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>All the commands function the same way as explained previously. The only difference being the values used in the distance arguments <code>r</code> &amp; <code>rm</code> for the walk/sprint detection commands. Calculation for the precise values are given below:</p><table><thead><tr><th>Movement Type</th><th>Average Speed (blocks per second)</th><th>Average Speed (blocks per tick)</th></tr></thead><tbody><tr><td>Walking</td><td>4.317 m/s</td><td>4.317 / 20 = 0.21585</td></tr><tr><td>Sprinting</td><td>5.612 m/s</td><td>5.612 / 20 = 0.2806</td></tr><tr><td>Sprint-Jumping</td><td>7.127</td><td>7.127 / 20 = 0.35635</td></tr></tbody></table><ul><li><strong>Walk Detection Commands:</strong><ol><li>The player is marked as <em>not</em> walking (0) if their speed is <code>0.21585</code> or under.</li><li>The player is marked as walking (1) if their speed exceeds <code>0.21585</code> but is <code>0.2806</code> or under.</li></ol></li><li><strong>Sprint Detection Commands:</strong><ol><li>The player is marked as <em>not</em> sprinting (0) if their speed is <code>0.2806</code> or under.</li><li>The player is marked as sprinting (1) if their speed exceeds <code>0.2806</code> but is <code>0.9</code> or under. <ul><li>Change the value <code>0.9</code> to <code>0.35635</code> if you wish to separate sprint-jumping from sprinting.</li></ul></li></ol></li></ul><h2 id="is-sleeping" tabindex="-1">is_sleeping <a class="header-anchor" href="#is-sleeping" aria-hidden="true">#</a></h2><p>This technique allows you to detect when the player is/isn&#39;t sleeping.</p><p><img src="`+m+'" alt="player_sleeping"></p><p>Note: When sleeping, the player&#39;s hitbox is reduced to 0.2 blocks.</p><p><strong>Commands:</strong></p><ul><li>Make sure you add the <code>is_sleeping</code> scoreboard objective: <ul><li><code>/scoreboard objectives add is_sleeping dummy</code></li></ul></li></ul>',10),f=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~0.3, dy=0] scoreboard players set @s is_sleeping 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s unless entity @s [y=~0.3, dy=0] run scoreboard players add @s is_sleeping 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sleeping=0}] run say I&#39;m not sleeping</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sleeping=1}] run say I started sleeping</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sleeping=1..}] run say I&#39;m still sleeping</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+o+'" alt="commandBlockChain5"></p><p>It is a requirement to follow this same sequence and properly apply the <code>scores</code> selector argument as shown for your desired commands.</p><p><strong>States:</strong></p><ul><li><strong><code>is_sleeping=0</code></strong> player is <em>not</em> sleeping.</li><li><strong><code>is_sleeping=1</code></strong> player started sleeping. (used for &#39;trigger&#39; actions)</li><li><strong><code>is_sleeping=1..</code></strong> player is still sleeping. (used for repeating actions)</li></ul><p><strong>Purpose Of Each Command:</strong></p><ul><li><strong>Command 1:</strong> If the player&#39;s hitbox is higher than 0.2 blocks, we mark them as <em>not</em> sleeping (0)</li><li><strong>Command 2:</strong> If the player&#39;s hitbox is <em>not</em> higher than 0.2 blocks, we mark them as sleeping (1) by adding a score. <ul><li>The score will keep incrementing if they don&#39;t stop sleeping. Allowing us to use single-execution commands each time they start sleeping.</li></ul></li><li><strong>Command 3, 4, 5:</strong> These are example commands (for each state) which can be modified / expanded.</li></ul><h2 id="is-sneaking" tabindex="-1">is_sneaking <a class="header-anchor" href="#is-sneaking" aria-hidden="true">#</a></h2><p>This technique allows you to detect when the player is/isn&#39;t sneaking.</p><p><img src="'+g+'" alt="player_sneaking"></p><p>Thanks to the introduction of Short Sneaking parity in 1.20.10 which reduces the player hitbox to 1.5 blocks when sneaking, making a proper sneak-detection using just commands is now possible which previously required add-on assistance.</p><p><strong>Commands:</strong></p><ul><li>Make sure you add the <code>is_sneaking</code> scoreboard objective: <ul><li><code>/scoreboard objectives add is_sneaking dummy</code></li></ul></li></ul>',13),k=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~1.5, dy=0] run scoreboard players set @s is_sneaking 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s unless entity @s [y=~1.5, dy=0] if entity @s [y=~0.7, dy=0] run scoreboard players add @s is_sneaking 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sneaking=0}] run say I&#39;m not sneaking</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sneaking=1}] run say I started sneaking</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sneaking=1..}] run say I&#39;m still sneaking</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+o+'" alt="commandBlockChain5"></p><p>It is a requirement to follow this same sequence and properly apply the <code>scores</code> selector argument as shown for your desired commands.</p><p><strong>States:</strong></p><ul><li><strong><code>is_sneaking=0</code></strong> player is <em>not</em> sneaking.</li><li><strong><code>is_sneaking=1</code></strong> player started sneaking. (used for &#39;trigger&#39; actions)</li><li><strong><code>is_sneaking=1..</code></strong> player is still sneaking. (used for repeating actions)</li></ul><p><strong>Purpose Of Each Command:</strong></p><ul><li><strong>Command 1:</strong> If the player&#39;s hitbox is higher than 1.4 blocks, we mark them as <em>not</em> sneaking (0)</li><li><strong>Command 2:</strong> If the player&#39;s hitbox is <em>not</em> higher than 1.4 blocks, we mark them as sneaking (1) by adding a score. <ul><li>The score will keep incrementing if they don&#39;t stop sneaking. Allowing us to use single-execution commands each time they start sneaking.</li><li>To prevent false-triggers when sleeping or crawling, we will also require their hitbox to be higher than 0.6 blocks.</li></ul></li><li><strong>Command 3, 4, 5:</strong> These are example commands (for each state) which can be modified / expanded.</li></ul><h2 id="is-crawling" tabindex="-1">is_crawling <a class="header-anchor" href="#is-crawling" aria-hidden="true">#</a></h2><p>This technique allows you to detect when the player is/isn&#39;t crawling.</p><p><img src="'+u+'" alt="player_crawling"></p><p>Note: When crawling, the player&#39;s hitbox is reduced to 0.6 blocks.</p><div class="warning custom-block"><p class="custom-block-title">Known Issue:</p><p>Swimming in water or gliding with Elytra will be detected as crawling.</p></div><p><strong>Commands:</strong></p><ul><li>Make sure you add the <code>is_crawling</code> scoreboard objective: <ul><li><code>/scoreboard objectives add is_crawling dummy</code></li></ul></li></ul>',14),A=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~0.7, dy=0] run scoreboard players set @s is_crawling 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s unless entity @s [y=~0.7, dy=0] if entity @s [y=~0.3, dy=0] run scoreboard players add @s is_crawling 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_crawling=0}] run say I&#39;m not crawling</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_crawling=1}] run say I started crawling</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_sneaking=1..}] run say I&#39;m still crawling</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+o+'" alt="commandBlockChain5"></p><p>It is a requirement to follow this same sequence and properly apply the <code>scores</code> selector argument as shown for your desired commands.</p><p><strong>States:</strong></p><ul><li><strong><code>is_crawling=0</code></strong> player is <em>not</em> crawling.</li><li><strong><code>is_crawling=1</code></strong> player started crawling. (used for &#39;trigger&#39; actions)</li><li><strong><code>is_crawling=1..</code></strong> player is still crawling. (used for repeating actions)</li></ul><p><strong>Purpose Of Each Command:</strong></p><ul><li><strong>Command 1:</strong> If the player&#39;s hitbox is higher than 0.6 blocks, we mark them as <em>not</em> crawling (0)</li><li><strong>Command 2:</strong> If the player&#39;s hitbox is <em>not</em> higher than 0.6 blocks, we mark them as crawling (1) by adding a score. <ul><li>The score will keep incrementing if they don&#39;t stop crawling. Allowing us to use single-execution commands each time they start crawling.</li><li>To prevent false-triggers when sleeping, we will require their hitbox to be higher than 0.2 blocks.</li></ul></li><li><strong>Command 3, 4, 5:</strong> These are example commands (for each state) which can be modified / expanded.</li></ul><h2 id="differentiating-crawling-gliding-and-swimming" tabindex="-1">Differentiating Crawling, Gliding And Swimming <a class="header-anchor" href="#differentiating-crawling-gliding-and-swimming" aria-hidden="true">#</a></h2><p>If you desperately need to detect all three states separately <strong>solely using commands</strong>, you may use this technique below.</p><div class="warning custom-block"><p class="custom-block-title">Known Issues:</p><ol><li>Gliding while touching the ground/ceiling or crashing straight into a wall will be detected as crawling.</li><li>Crawling from absolute corner of a block with no adjacent blocks above and below will be detected as Gliding. <ul><li><img src="'+y+'" alt="issue2"></li></ul></li><li>Swimming in a waterlogged block under another waterlogged block will be detected as crawling. <ul><li><img src="'+h+'" alt="issue3"></li></ul></li></ol></div>',10),F=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~0.7, dy=0] run scoreboard players set @s is_gliding 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~0.7, dy=0] run scoreboard players set @s is_crawling 0</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a at @s if entity @s [y=~0.7, dy=0] run scoreboard players set @s is_swimming 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [hasitem={item=elytra,location=slot.armor.chest}] at @s unless entity @s [y=~0.7, dy=0] if entity @s [y=~0.3, dy=0] if block ~~1.01~ air if block ~~-0.01~ air rotated ~ 0 if block ^^1.01^-1 air if block ^^-0.01^-1 air if block ^^1.01^1 air if block ^^-0.01^1 air run scoreboard players add @s is_gliding 1</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_gliding=0}] at @s unless entity @s [y=~0.7, dy=0] if entity @s [y=~0.3, dy=0] unless block ~~~ water unless block ~~1.01~ water run scoreboard players add @s is_crawling 1</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_gliding=0,is_crawling=0}] at @s unless entity @s [y=~0.7, dy=0] if entity @s [y=~0.3, dy=0] run scoreboard players add @s is_swimming 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_swimming=0}] run say I&#39;m not swimming</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_crawling=1}] run say I started crawling</span></span>
<span class="line"><span style="color:#C3E88D;">/execute as @a [scores={is_gliding=1..}] run say I&#39;m still gliding</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="`+b+'" alt="commandBlockChain9"></p><p><strong>Purpose Of Each Command:</strong></p><ul><li><strong>Command 1, 2, 3:</strong> If the player&#39;s hitbox is higher than 0.6 blocks, we mark them as <em>not</em> gliding/crawling/swimming (0)</li><li><strong>Command 4:</strong> If the player&#39;s hitbox is <em>not</em> higher than 0.6 blocks, has equiped an elytra, and has no blocks above/below their head/chest/feet, we mark them as gliding (1) by adding a score. <ul><li>The score will keep incrementing if they don&#39;t stop gliding. Allowing us to use single-execution commands each time they start gliding. We will employ the same for crawling/gliding.</li><li>To prevent false-triggers when sleeping, we will also require their hitbox to be higher than 0.2 blocks. We will employ the same for crawling/gliding.</li></ul></li><li><strong>Command 5:</strong> If the player&#39;s hitbox is <em>not</em> higher than 0.6 blocks, is not gliding, and has no water above/below them, we mark them as crawling (1) by adding a score.</li><li><strong>Command 6:</strong> If the player&#39;s hitbox is <em>not</em> higher than 0.6 blocks, is not gliding or crawling, we mark them as swimming (1) by adding a score.</li><li><strong>Command 7, 8, 9:</strong> These are example commands (for each state) which can be modified / expanded.</li></ul>',4);function v(x,T,E,I,S,q){const n=p("CodeHeader");return c(),r("div",null,[D,e(n,null,{default:a(()=>[l("BP/functions/states/is_moving.mcfunction")]),_:1}),_,e(n,null,{default:a(()=>[l("BP/functions/states/is_moving.mcfunction")]),_:1}),w,e(n,null,{default:a(()=>[l("BP/functions/states/is_sleeping.mcfunction")]),_:1}),f,e(n,null,{default:a(()=>[l("BP/functions/states/is_sneaking.mcfunction")]),_:1}),k,e(n,null,{default:a(()=>[l("BP/functions/states/is_crawling.mcfunction")]),_:1}),A,e(n,null,{default:a(()=>[l("BP/functions/states/is_crawling.mcfunction")]),_:1}),F])}const N=t(C,[["render",v]]);export{V as __pageData,N as default};
