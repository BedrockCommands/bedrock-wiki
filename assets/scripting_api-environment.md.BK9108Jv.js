import{_ as n,E as r,j as i,k as a,a5 as o,A as d,I as c,J as s}from"./chunks/framework.3Z9w-w8R.js";const y=JSON.parse('{"title":"Engine Environment","description":"Minecraft Bedrock scripting engine environment.","frontmatter":{"title":"Engine Environment","category":"Documentation","mentions":["conmaster2112","JaylyDev","ThomasOrs","MuhammadRestu999"],"description":"Minecraft Bedrock scripting engine environment."},"headers":[{"level":2,"title":"Common problems","slug":"common-problems","link":"#common-problems","children":[]},{"level":2,"title":"Support","slug":"support","link":"#support","children":[]}],"relativePath":"scripting/api-environment.md","filePath":"scripting/api-environment.md"}'),l={name:"scripting/api-environment.md"};function p(u,e,m,h,f,g){const t=r("CodeHeader");return a(),i("div",null,[e[1]||(e[1]=o('<p>Minecraft: Bedrock Edition uses its own version of JavaScript, which is based on QuickJS. It uses the ECMAScript module (ESM) system for organizing and loading code, which allows for a more modular and organized approach to writing scripts for the game.</p><h2 id="common-problems" tabindex="-1">Common problems <a class="header-anchor" href="#common-problems" aria-label="Permalink to &quot;Common problems&quot;">​</a></h2><ul><li><strong>SetTimeout support</strong></li></ul><p>What people often run into when starting out with Minecraft Scripting is the problem with timing. The standards for timing code, as you may know, are the <code>setTimeout</code> and <code>setInterval</code> functions and their cancel functions.</p><p>These standardized methods are used by the frame system where you can set the delay to millisecond precision, but minecraft uses a tick to process changes in the world. That&#39;s why these methods are not and will not be available. Minecraft instead use <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/system#runtimeout" target="_blank" rel="noreferrer"><code>system.runTimeout</code></a> and <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/system#runinterval" target="_blank" rel="noreferrer"><code>system.runInterval</code></a> system methods, first added in version 1.19.70, which delay to the precision of one tick. You can read more about this on <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/system" target="_blank" rel="noreferrer">Microsoft Docs</a> or <a href="/scripting/script-server#scheduling">Wiki Tutorial</a></p><ul><li><strong>Eval permission</strong></li></ul><p>Not everyone can encounter this problem because the use of eval and Function method for running code in string format is not great.</p><p>Some browsers also prohibit the use of these methods, mainly the eval method, as when using eval there is a risk of malicious code which is why it is disabled by default.</p><p>To enable these methods that evaluate code, you must add it in the manifest. This capability also adds the usage of the <code>Function()</code> constructor.</p>',9)),d(t,null,{default:c(()=>e[0]||(e[0]=[s("BP/manifest.json")])),_:1}),e[2]||(e[2]=o(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;capabilities&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script_eval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h2><ul><li><p><strong><em>What is supported</em></strong></p><ul><li><code>Object</code> - Standard function constructor for objects</li><li><code>Function</code> - Standard function constructor for functions</li><li><code>Error</code> - (<code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>, <code>SyntaxError</code>, <code>TypeError</code>, <code>URIError</code>, <code>InternalError</code>, <code>AggregateError</code>) - Classes for error construction</li><li><code>Array</code> - (<code>Int8Array</code>, <code>UInt8Array</code>, <code>Int16Array</code>, <code>UInt16Array</code>, <code>Int32Array</code>, <code>UInt32Array</code>, <code>Float32Array</code>, <code>Float64Array</code>, <code>SharedArrayBuffer</code>, <code>ArrayBuffer</code>, <code>UInt8ClampedArray</code>) Standard function constructor for Array objects</li><li><code>parseInt</code>, <code>parseFloat</code> - Standard methods for parsing string to number</li><li><code>isNaN</code>, <code>isFinite</code> - Standard methods for checking number types</li><li><code>decodeURI</code>, <code>encodeURI</code> - Standard methods for decoding and encoding URI paths</li><li><code>decodeURIComponent</code>, <code>encodeURIComponent</code> - Standard methods for decoding and encoding URI components</li><li><code>escape</code>, <code>unescape</code> - Non-standard methods! Please use decodeURI/encodeURI if possible</li><li><code>NaN</code>, <code>Infinity</code>, <code>undefined</code> - Standard variables for in-code usage</li><li><code>__date_clock</code> - Built-in QuickJS method for getting current time</li><li><code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>Symbol</code> - Standard function constructor for JS primitives</li><li><code>Math</code> - Standard object having primary math functions, such as trig ratios &amp; powers</li><li><code>Reflect</code> - Standard object having built-in methods</li><li><code>eval</code> - Standard method for evaluating string as code. Note that the capability for this must be added to the manifest.</li><li><code>globalThis</code> - Standard object with access to global scoped variables</li><li><code>Date</code> - Standard function constructor for date instance</li><li><code>RegExp</code> - Standard function constructor for regex instance</li><li><code>JSON</code> - Standard object having stringify and parse methods for JSON interaction</li><li><code>Proxy</code> - Standard function constructor for build-in proxy handler</li><li><code>Map</code>, <code>Set</code>, <code>WeakMap</code>, <code>WeakSet</code> - Standard function constructors for data organisation objects</li><li><code>DataView</code> - Standard function constructor for binary array interactions</li><li><code>Promise</code> - Standard function constructor for async interaction</li><li><code>console</code> - Standard object having base output methods (<code>log</code>, <code>warn</code>, <code>error</code>, <code>info</code>)</li></ul></li><li><p><strong><em>What is not supported</em></strong></p><ul><li><code>setTimeout</code> - Standard function for timing code runs</li><li><code>setInterval</code> - Standard function for timing code runs in intervals</li><li><code>clearTimeout</code> - Standard function for canceling setTimeout runs</li><li><code>clearInterval</code> - Standard function for canceling setInterval runs</li></ul></li><li><p><strong>Extended Methods</strong> We have bunch of additional methods exposed by QuickJS, but do not expect anything game-changing! We do have some additional string methods to wrap string in html formats. For example: <code>&quot;text&quot;.bolt() -&gt; &quot;&lt;b&gt;text&lt;b&gt;&quot;</code>. These methods are useless and not documented and we are not going to either.</p></li></ul>`,3))])}const v=n(l,[["render",p]]);export{y as __pageData,v as default};
