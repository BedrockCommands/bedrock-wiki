import{_ as r}from"./chunks/4.bf191be1.js";import{_ as i,c,a as e,w as l,d as a,e as s,r as o,o as p}from"./404.md.56cf0ff1.js";const C=JSON.parse('{"title":"On Player Death","description":"","frontmatter":{"title":"On Player Death","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":4,"tags":["system"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]},{"level":2,"title":"Tick Json","slug":"tick-json","link":"#tick-json","children":[]},{"level":2,"title":"Folder Structure","slug":"folder-structure","link":"#folder-structure","children":[]},{"level":2,"title":"Folder Structure","slug":"folder-structure-1","link":"#folder-structure-1","children":[]}],"relativePath":"commands/on-player-death.md"}'),d={name:"commands/on-player-death.md"},u=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player dies.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p>The scoreboard alive must be initilaized for this to funtion. to initialize this automatically without the need to have a a player with command previlages, follow the process outlined in <a href="/commands/on-first-world-load.html">on first world load</a>.</p><p>If you prefer to initialize manually this can be completed using the following command:</p><p><code>/scoreboard objectives add alive dummy</code></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2>',8),h=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">scoreboard players set @a [scores={alive=!2}] alive 0</span></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @e [type=player] alive 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">execute as @a [scores={alive=0}] run say I died</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @a [scores={alive=0}] alive 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+r+'" alt="commandBlockChain4"></p><p>Here we have used an <code>/execute - say</code> command as an example but you can use any command you prefer and as many as you require.</p><p>Just make sure to follow the given order and properly add the selector argument <code>scores={alive=0}</code> as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><ul><li><p><strong><code>alive=0</code></strong> this means player is dead.</p></li><li><p><strong><code>alive=1</code></strong> this means player is alive.</p></li><li><p><strong><code>alive=2</code></strong> this means player is dead and we have run our desired commands on/from them.</p></li><li><p><strong><code>@a</code></strong> selector will target all players alive/dead so we use it to mark everyone as 0 &#39;dead.&#39;</p><ul><li>Note: we will ignore 2 or it will end up making the commands execute on dead players again. We only want our commands to execute once.</li></ul></li><li><p><strong><code>@e</code></strong> selector on the other hand will only target players who are alive, so we can use this to mark all alive players 1 &#39;alive.&#39;</p></li><li><p>Now that dead players are 0 and alive players are 1 we can use this knowledge to run our desired commands on the dead players.</p><ul><li>Keep in mind we need to set their score to 2 after or otherwise the commands will keep executing till they respawn.</li></ul></li></ul><h2 id="tick-json" tabindex="-1">Tick Json <a class="header-anchor" href="#tick-json" aria-hidden="true">#</a></h2><p>To get this funtion to run in a loop contuously it must be added to tick.json or a command block. Multiple files can added to the tick.json by placing a ccommon after each string. See <a href="/commands/mcfunctions.html#tick-json">Functions</a> for more details.</p>',8),m=s(`<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">values</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">on_death</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="folder-structure" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure" aria-hidden="true">#</a></h2><p>The structure of this behavior pack would be as follows.</p><h2 id="folder-structure-1" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure-1" aria-hidden="true">#</a></h2>`,4);function y(_,b,f,v,g,w){const n=o("CodeHeader"),t=o("FolderView");return p(),c("div",null,[u,e(n,null,{default:l(()=>[a("BP/functions/on_death.mcfunction")]),_:1}),h,e(n,null,{default:l(()=>[a("BP/functions/tick.json")]),_:1}),m,e(t,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_death.mcfunction","BP/functions/tick.json"]},null,8,["paths"]),a(" ## notes on Compatibbility The Scoreboard names (alive in this case) may end up being used by other people. appending and _ and a set of randomly generated characters after alive would be a choice that reduces the probability of colisions. Similar techniques can be employed for the filenames in the .mcfunction files. ")])}const T=i(d,[["render",y]]);export{C as __pageData,T as default};
