import{_ as r,c as d,a,P as n,U as e,r as o,o as c,T as i,aF as t}from"./chunks/framework.Dhk1h2hq.js";const E=JSON.parse('{"title":"On Player Death","description":"This system will run your desired commands on the event that a player dies.","frontmatter":{"title":"On Player Death","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":4,"description":"This system will run your desired commands on the event that a player dies."},"headers":[],"relativePath":"commands/on-player-death.md","filePath":"commands/on-player-death.md","lastUpdated":1724523830000}'),p={name:"commands/on-player-death.md"},h=e('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player dies.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add is_alive dummy</code></p><p>If you are working with functions and prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load.html">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-label="Permalink to &quot;System&quot;">​</a></h2>',8),m=e(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players set @a [scores={is_alive=!2}] is_alive 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players set @e [type=player] is_alive 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Your Commands Here (example)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute as @a [scores={is_alive=0}] run say I died</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players set @a [scores={is_alive=0}] is_alive 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+t+'" alt="commandBlockChain4"></p><p>Here, we have used an <code>/execute - say</code> command as an example, but you can use any command you prefer and as many as you need.</p><p>Just make sure to follow the given order and properly apply the <code>scores={alive=0}</code> selector argument as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><ul><li><strong><code>is_alive=0</code></strong> player is <em>not</em> alive (dead).</li><li><strong><code>is_alive=1</code></strong> player is alive.</li><li><strong><code>is_alive=2</code></strong> player is dead and we have executed our desired commands on/from them.</li></ul><p><strong>Purpose Of Each Command:</strong></p><ol><li><strong>Command 1:</strong> All players will be marked as <em>not</em> alive (0) by default. <ul><li>We will ignore score <code>2</code>, else the commands that we want to run when the player dies will trigger more than once.</li></ul></li><li><strong>Command 2:</strong> All alive players will be marked as &#39;alive&#39; (1). <ul><li><code>@e</code> selector allows us to exclusively target players who are alive.</li><li><code>@a</code> selector will target all players, whether they are alive or not.</li></ul></li><li><strong>Command 3:</strong> Now that alive players have a score of 1 and non-alive players have a score of 0, we will use this knowledge to run our desired commands when the player becomes dead (0).</li><li><strong>Command 4:</strong> Since we want to execute our desired commands only once when the player dies, we will set their score to <code>2</code>. As not doing this will cause the commands to repeat till they respawn.</li></ol><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-label="Permalink to &quot;Tick JSON&quot;">​</a></h2><p>If you are using functions instead of command blocks, the <code>on_player_death</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions.html#tick-json">Functions</a> documentation for further info.</p>',10),u=e(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;on_player_death&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be be as follows:</p>`,2),y=e('<blockquote><p>Note: The scoreboard names (in this case: &#39;is_alive&#39;) may end up being used by other people. Appending <code>_</code> and a set of randomly generated characters after would be a choice that reduces the probability of collisions. Similar technique can be employed for the <code>.mcfunction</code> filenames. Ex:</p><ul><li><code>is_alive_0fe678</code></li><li><code>on_player_death_0fe678.mcfunction</code></li></ul></blockquote><h2 id="alternative-method" tabindex="-1">Alternative Method <a class="header-anchor" href="#alternative-method" aria-label="Permalink to &quot;Alternative Method&quot;">​</a></h2><p>This method was possible after the introduction of the new <code>/execute</code> syntax in Minecraft <code>1.19.50</code>.</p><div class="warning custom-block"><p class="custom-block-title">Known Issue:</p><p>If two or more players are teleported to the same point and one of them dies but the remaining players do not move, the system will fail to execute the commands.</p></div><ul><li>Make sure you add the <code>is_dead</code> scoreboard objective: <ul><li><code>/scoreboard objectives add is_dead dummy</code></li></ul></li></ul>',5),_=e(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players set @e [type=player] is_dead 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute as @a at @s unless entity @e [type=player, r=0.01] run scoreboard players add @s is_dead 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Your Commands Here (example)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute as @a [scores={is_dead=1}] at @s run summon armor_stand &quot;Dead Player&quot; ~~~</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute as @a [scores={is_dead=1..}] run say I died and haven&#39;t respawned yet..</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+t+'" alt="commandBlockChain4"></p><p><strong>States:</strong></p><ul><li><strong><code>is_dead=0</code></strong> player is <em>not</em> dead (alive).</li><li><strong><code>is_dead=1</code></strong> player just died. (used for &#39;trigger&#39; actions)</li><li><strong><code>is_dead=1..</code></strong> player is still dead. (used for repeating actions)</li></ul><p><strong>Purpose Of Each Command:</strong></p><ol><li><strong>Command 1:</strong> All alive players are marked as <em>not</em> dead (0)</li><li><strong>Command 2:</strong> If there is no alive player within a 0.01 block radius of a player, they will be marked as dead (1) <ul><li>The logic is that only the player themself can be present within such a small radius from them. The probability of two or more players to precisely stand at the same point by themselves (without <code>/tp</code> command) is close to zero.</li></ul></li><li><strong>Command 3, 4:</strong> These are example commands (for each state) which can be modified / expanded.</li></ol>',6);function b(g,k,f,v,w,C){const s=o("CodeHeader"),l=o("FolderView");return c(),d("div",null,[h,a(s,null,{default:n(()=>[i("BP/functions/on_player_death.mcfunction")]),_:1}),m,a(s,null,{default:n(()=>[i("BP/functions/tick.json")]),_:1}),u,a(l,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_player_death.mcfunction","BP/functions/tick.json"]}),y,a(s,null,{default:n(()=>[i("BP/functions/states/is_dead.mcfunction")]),_:1}),_])}const F=r(p,[["render",b]]);export{E as __pageData,F as default};
