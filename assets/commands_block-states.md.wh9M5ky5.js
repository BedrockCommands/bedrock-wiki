import{_ as n,c as l,a as t,P as o,U as e,r as i,o as c,T as a}from"./chunks/framework.DdGZY_29.js";const v=JSON.parse('{"title":"Block States","description":"Learn how to use block states in commands.","frontmatter":{"title":"Block States","category":"General","mentions":["BedrockCommands","zheaEvyline","SmokeyStack","ThomasOrs"],"description":"Learn how to use block states in commands."},"headers":[],"relativePath":"commands/block-states.md","filePath":"commands/block-states.md","lastUpdated":1724415992000}'),r={name:"commands/block-states.md"},d=e('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced by Bedrock Commands Community Discord</a></p><p>Block States or Block Properties are additional data that defines how the block appears or behaves. Such as the direction it&#39;s facing, it&#39;s color, it&#39;s variant, whether it is powered or unpowered, and so on.</p><p>This is used in a multitude of commands. Such as <code>/clone</code>, <code>/execute</code>, <code>/fill</code>, <code>/setblock</code> and <code>/testforblock</code></p><p>In Bedrock Edition, we used Aux values (also known as Metadata) to define a block. However, as of 1.19.70 and beyond, this is no longer supported and have been fully replaced with Block States instead.</p>',5),u=e(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Aux Value Example:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#It&#39;s Block State equivalent:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;orange&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Any command block using Aux Values will continue to function as it is. However, Block States will need to be adopted when updating them.</li><li>Similarly, any commands using Aux Values in behavior/function packs with <code>min_engine_version</code> 1.19.63 or below will also continue to function. However, they must be replaced with Block States once the <code>min_engine_version</code> is updated to 1.19.70 or above.</li></ul><h2 id="block-state-examples-syntax" tabindex="-1">Block State Examples &amp; Syntax <a class="header-anchor" href="#block-state-examples-syntax" aria-label="Permalink to &quot;Block State Examples &amp; Syntax&quot;">​</a></h2>`,3),p=e(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool [&quot;color&quot;=&quot;white&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wheat [&quot;growth&quot;=0]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wood [&quot;wood_type&quot;=&quot;birch&quot;,&quot;stripped_bit&quot;=true]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setblock ~ ~ ~ wool []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Block states are enclosed in square brackets <code>[ ]</code></li><li>When specifying multiple block states, a comma <code>,</code> is used to separate them.</li><li>Quotation marks <code>&quot; &quot;</code> are used around strings. Such as <code>&quot;birch&quot;</code>, <code>&quot;spruce&quot;</code>, etc..</li><li>Integer values <code>0, 1, 2..</code> and boolean values <code>true/false</code> should not use quotation marks.</li><li>Leaving the brackets empty will default to 0. <ul><li>Example: <code>wool 0</code> is white wool. Hence, you may simply write it as <code>wool []</code> or <code>wool</code> instead of <code>wool [&quot;color&quot;=&quot;white&quot;]</code></li></ul></li></ul><h3 id="notes-for-beginners" tabindex="-1">Notes For Beginners <a class="header-anchor" href="#notes-for-beginners" aria-label="Permalink to &quot;Notes For Beginners&quot;">​</a></h3><ul><li><p><strong>Integers</strong> are whole numbers. They are used to define a block from a &#39;range&#39; of values.</p><ul><li>Example: Redstone power 1 to 15</li><li><code>[&quot;redstone_power&quot;=10]</code></li></ul></li><li><p><strong>Boolean</strong> is a programming term which refers to <code>true/false</code> values. You can understand them like yes/no questions.</p><ul><li>Is this piston powered? <code>yes/no</code></li><li>Is this button pressed? <code>yes/no</code></li><li>Is this log stripped? <code>yes/no</code></li><li>Example: <code>[&quot;stripped_bit&quot;=true]</code></li></ul></li><li><p><strong>Strings</strong> are unique &#39;text&#39; inputs. You can understand them like multiple-choice questions.</p><ul><li>What color is this wool? <code>&quot;white&quot;</code>, <code>&quot;orange&quot;</code>, <code>&quot;brown&quot;</code>, etc..</li><li>What wood type is this log? <code>&quot;spruce&quot;</code>, <code>&quot;birch&quot;</code>, <code>&quot;acacia&quot;</code>, etc..</li><li>Example: <code>[&quot;wood_type&quot;=&quot;spruce&quot;]</code></li></ul></li></ul><h2 id="block-states-list" tabindex="-1">Block States List <a class="header-anchor" href="#block-states-list" aria-label="Permalink to &quot;Block States List&quot;">​</a></h2><p>A list of all the Block States currently available in Bedrock can be found at: <a href="https://learn.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockstateslist" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockstateslist</a></p><ul><li>Note: In the site, Block States may be listed in <code>camelCase</code>, but in commands, only enter them in <code>snake_case</code><ul><li>Example: <code>buttonPressedBit</code> → <code>&quot;button_pressed_bit&quot;</code></li></ul></li></ul><h2 id="converting-aux-values-to-block-states" tabindex="-1">Converting Aux Values to Block States <a class="header-anchor" href="#converting-aux-values-to-block-states" aria-label="Permalink to &quot;Converting Aux Values to Block States&quot;">​</a></h2><p>For your convenience, you may use this <a href="https://auxval-to-blockstates.netlify.app/" target="_blank" rel="noreferrer">Lookup Table</a> by <em>@SmokeyStack</em> to get the up-to-date list of all the Block IDs, their Aux Values and Block State equivalents.</p><h2 id="known-issue" tabindex="-1">Known Issue <a class="header-anchor" href="#known-issue" aria-label="Permalink to &quot;Known Issue&quot;">​</a></h2><p>Commands specifying blocks must either leave the Block States field blank, or include <strong>all</strong> of it&#39;s corresponding Block States. Else, the command will not work.</p><p>For example, the following commands will work:</p>`,12),h=e(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Testing for a Stone Button. (aux value 0)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button run say success</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Testing for a non-pressed Stone Button facing west. (aux value 1)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [“button_pressed_bit”=false,”facing_direction”=1] run say success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Reason the first command works is because the Block States field was left blank.</li><li>Reason the second command works is because it included all Block States of the Stone Button. Which are: <ul><li><code>button_pressed_bit</code> (if the button was pressed/unpressed)</li><li><code>facing_direction</code> (whether the button was facing up/down/north/south/east/west)</li><li>Buttons do not have any other Block State.</li></ul></li></ul><p>Now, if we want to test for a pressed Stone Button that may face <em>any</em> direction, we would use a command like this:</p>`,3),m=e('<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/execute if block ~~~ stone_button [“button_pressed_bit”=true] run say success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>However, this command will not work as the <code>facing_direction</code> Block State is missing.</p><p>In conclusion: Though Block States have replaced Aux Values, we still cannot test for blocks based on select few conditions/filters like we do with entities using Selector Arguments.</p><p><strong>Related Bug Reports:</strong></p><ul><li><a href="https://bugs.mojang.com/browse/MCPE-133360" target="_blank" rel="noreferrer">MCPE-133360</a></li><li><a href="https://bugs.mojang.com/browse/MCPE-168391" target="_blank" rel="noreferrer">MCPE-168391</a></li></ul>',5);function b(k,_,g,f,w,y){const s=i("CodeHeader");return c(),l("div",null,[d,t(s,null,{default:o(()=>[a("example")]),_:1}),u,t(s,null,{default:o(()=>[a("Examples")]),_:1}),p,t(s),h,t(s),m])}const S=n(r,[["render",b]]);export{v as __pageData,S as default};
