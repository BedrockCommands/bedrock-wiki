import{_ as l}from"./chunks/3.035a77e6.js";import{_ as i,c,a as e,w as o,d as s,e as a,r as t,o as p}from"./404.md.fefb3dce.js";const D=JSON.parse('{"title":"On Player Respawn","description":"","frontmatter":{"title":"On Player Respawn","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":5,"tags":["system"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]},{"level":2,"title":"Tick Json","slug":"tick-json","link":"#tick-json","children":[]},{"level":2,"title":"Folder Structure","slug":"folder-structure","link":"#folder-structure","children":[]},{"level":2,"title":"Folder Structure","slug":"folder-structure-1","link":"#folder-structure-1","children":[]}],"relativePath":"commands/on-player-respawn.md"}'),d={name:"commands/on-player-respawn.md"},u=a('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player respawns from death state.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p>The scoreboard alive must be initilaized for this to funtion. to initialize this automatically without the need to have a a player with command previlages, follow the process outlined in <a href="/commands/on-first-world-load.html">on first world load</a>.</p><p>If you prefer to initialize manually this can be completed using the following command:</p><p><code>/scoreboard objectives add respawn dummy</code></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2>',8),m=a(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">execute as @e [scores={respawn=1}] run say I died and respawned.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @a respawn 1</span></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @e [type=player] respawn 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+l+'" alt="commandBlockChain3"></p><p>Here we have used an <code>/execute - say</code> command as an example but you can use any command you prefer and as many as you require.</p><p>Just make sure to follow the given order and properly use the selector argument <code>@e [scores={respawn=1}]</code> as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><ul><li><strong><code>respawn=0</code></strong> this means the player is alive or had already respawned.</li><li><strong><code>respawn=1</code></strong> this means the player died and is now respawning, ie. respawned <em>just now</em>, in the current gametick.</li><li><strong><code>@a</code></strong> selector will target all players alive/dead so we use it to mark everyone as 1 &#39;respawning&#39;</li><li><strong><code>@e</code></strong> selector on the other hand will only target players who are alive, so we can use this to mark all alive players 0 &#39;respawned&#39;</li></ul><p>Now that <em>respawning</em> players are 1 and <em>respawned</em> players are 0 we can use this knowledge to run our desired commands on the players respawning.</p><p>In the system, your desired commands must come before the other 2 commands because players change from death state to alive state along the start of the gametick before commands are run.</p><p>Hence; if we were to put them at the end then the other 2 commands would set respawning players score to 0 first and then the commands you want to run won&#39;t be able to select those players as our selector argument is <code>@e [scores={respawn=1}]</code> not 0. Using 0 would not work as then it would repeat endlessly even on players who have already respawned.</p><h2 id="tick-json" tabindex="-1">Tick Json <a class="header-anchor" href="#tick-json" aria-hidden="true">#</a></h2><p>To get this funtion to run in a loop contuously it must be added to tick.json or a command block. Multiple files can added to the tick.json by placing a ccommon after each string. See <a href="/commands/mcfunctions.html#tick-json">Functions</a> for more details.</p>',11),h=a(`<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">values</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">on_join</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="folder-structure" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure" aria-hidden="true">#</a></h2><p>The structure of this behavior pack would be as follows.</p><h2 id="folder-structure-1" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure-1" aria-hidden="true">#</a></h2>`,4);function y(_,f,b,w,g,v){const n=t("CodeHeader"),r=t("FolderView");return p(),c("div",null,[u,e(n,null,{default:o(()=>[s("on_player_respawn.mcfunction")]),_:1}),m,e(n,null,{default:o(()=>[s("BP/functions/tick.json")]),_:1}),h,e(r,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_player_respawn.mcfunction","BP/functions/tick.json"]},null,8,["paths"]),s(" ## notes on Compatibbility The Scoreboard names (alive in this case) may end up being used by other people. appending and _ and a set of randomly generated characters after alive would be a choice that reduces the probability of colisions. Similar techniques can be employed for the filenames in the .mcfunction files. ")])}const T=i(d,[["render",y]]);export{D as __pageData,T as default};
