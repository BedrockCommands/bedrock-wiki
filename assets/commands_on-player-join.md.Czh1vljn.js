import{_ as r,c as d,a,P as i,U as s,b as e,T as n,r as t,o as c,aF as p}from"./chunks/framework.DdGZY_29.js";const T=JSON.parse('{"title":"On Player Join","description":"This system will run your desired commands on the event that a player joins the world.","frontmatter":{"title":"On Player Join","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":2,"description":"This system will run your desired commands on the event that a player joins the world."},"headers":[],"relativePath":"commands/on-player-join.md","filePath":"commands/on-player-join.md","lastUpdated":1724412866000}'),h={name:"commands/on-player-join.md"},u=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player joins the world.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add joined dummy</code></p><p>If you are working with functions and prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load.html">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-label="Permalink to &quot;System&quot;">​</a></h2>',8),m=s(`<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players add @a joined 0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Your Commands Here (example)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/tp @a[scores={joined=0}] 0 65 0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players reset * joined</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/scoreboard players set @a joined 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+p+'" alt="Chain Of 4 Command Blocks"></p><p>Here, we have used a <code>/tp</code> command as an example, but you can use any command you prefer and as many as you need.</p><p>Just make sure to follow the given order and properly apply the <code>scores={joined=0}</code> selector argument as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><p>When the player joins, a score of <code>0</code> is added to their <code>joined</code> objective. This allows us to run commands from them using the <code>scores</code> selector argument.</p><p>Immediately after the commands are run, we reset all the scores on the objective using wildcard <strong><code>*</code></strong>. And only the players who stayed online will have their score set to <code>1</code>.</p><p>This way, since our commands only target players with a score of <code>0</code>, the commands won&#39;t repeat for the players who stayed, unless they leave and rejoin or if we run: <br><code>/scoreboard players set &lt;player&gt; joined 0</code></p><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-label="Permalink to &quot;Tick JSON&quot;">​</a></h2><p>If you are using functions instead of command blocks, the <code>on_player_join</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions.html#tick-json">Functions</a> documentation for further info.</p>',10),y=s(`<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;on_player_join&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be be as follows:</p>`,2),_=e("blockquote",null,[e("p",null,[n("Note: The scoreboard names (in this case: 'joined') may end up being used by other people. Appending "),e("code",null,"_"),n(" and a set of randomly generated characters after would be a choice that reduces the probability of collisions. Similar technique can be employed for the "),e("code",null,".mcfunction"),n(" filenames. Ex:")]),e("ul",null,[e("li",null,[e("code",null,"joined_0fe678")]),e("li",null,[e("code",null,"on_player_join_0fe678.mcfunction")])])],-1);function b(f,k,g,j,v,w){const o=t("CodeHeader"),l=t("FolderView");return c(),d("div",null,[u,a(o,null,{default:i(()=>[n("BP/functions/on_player_join.mcfunction")]),_:1}),m,a(o,null,{default:i(()=>[n("BP/functions/tick.json")]),_:1}),y,a(l,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_player_join.mcfunction","BP/functions/tick.json"]}),_])}const C=r(h,[["render",b]]);export{T as __pageData,C as default};
